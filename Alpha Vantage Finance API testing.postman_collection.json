{
	"info": {
		"_postman_id": "9f11f273-43ae-4b88-8d6c-a75d6ec38b28",
		"name": "Alpha Vantage Finance API testing",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "46632154",
		"_collection_link": "https://rv-8083040.postman.co/workspace/RV's-Workspace~a9b9699e-fd4d-4d59-8c73-a923614a7f21/collection/46632154-9f11f273-43ae-4b88-8d6c-a75d6ec38b28?action=share&source=collection_link&creator=46632154"
	},
	"item": [
		{
			"name": "validating_global_quote_function",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData;\r",
							"\r",
							"try{\r",
							"    jsonData = pm.response.json()\r",
							"}\r",
							"catch(e){\r",
							"    pm.test(\"Response is not valid\", ()=>{\r",
							"        throw new Error(\"Response is not json.\" + pm.response.text());\r",
							"    })\r",
							"    return;\r",
							"}\r",
							";\r",
							"\r",
							"if(jsonData['Note']){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Note\"]);\r",
							"    pm.test(\"Rate limit warning recieved.\", ()=>{\r",
							"        pm.expect(jsonData['Note']).to.include('API call frequency');\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Error Message\"]){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Error Message\"]);\r",
							"    pm.test(\"Invalid API call\", ()=>{\r",
							"        pm.expect(jsonData[\"Error Message\"]).to.be.not.empty;\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Information\"]){\r",
							"    console.warn(\"API rate limit exceeded\");\r",
							"    pm.test(\"API rate limit is 25\", ()=>{\r",
							"        pm.expect(jsonData[\"Information\"]).to.include(\"API rate limit is 25 requests per day\");\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200.\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"let it_symbol = pm.iterationData.get(\"symbol\");\r",
							"\r",
							"pm.environment.set(\"env_symbols\", it_symbol);\r",
							"\r",
							"if(jsonData[\"Global Quote\"] && jsonData[\"Global Quote\"][\"01. symbol\"]){\r",
							"    pm.test(\"Symbol is\" + it_symbol, function(){\r",
							"        pm.expect(jsonData[\"Global Quote\"][\"01. symbol\"]).to.be.eql(it_symbol)\r",
							"    })\r",
							"}\r",
							"else{\r",
							"    console.warn(\"Missing Global Quote or Symbol field.\")\r",
							"}\r",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?function=GLOBAL_QUOTE&symbol={{symbol}}&apikey={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "function",
							"value": "GLOBAL_QUOTE"
						},
						{
							"key": "symbol",
							"value": "{{symbol}}"
						},
						{
							"key": "apikey",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "validating_time_series_function",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData;\r",
							"\r",
							"try{\r",
							"    jsonData = pm.response.json()\r",
							"}\r",
							"catch(e){\r",
							"    pm.test(\"Response is not valid\", ()=>{\r",
							"        throw new Error(\"Response is not json.\" + pm.response.text());\r",
							"    })\r",
							"    return;\r",
							"}\r",
							";\r",
							"\r",
							"if(jsonData['Note']){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Note\"]);\r",
							"    pm.test(\"Rate limit warning recieved.\", ()=>{\r",
							"        pm.expect(jsonData['Note']).to.include('API call frequency');\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Error Message\"]){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Error Message\"]);\r",
							"    pm.test(\"Invalid API call\", ()=>{\r",
							"        pm.expect(jsonData[\"Error Message\"]).to.be.not.empty;\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Information\"]){\r",
							"    console.warn(\"API rate limit exceeded\");\r",
							"    pm.test(\"API rate limit is 25\", ()=>{\r",
							"        pm.expect(jsonData[\"Information\"]).to.include(\"API rate limit is 25 requests per day\");\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"Has timeSeries Daily Data array\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"Time Series (Daily)\");\r",
							"})\r",
							"\r",
							"pm.test(\"Symbol is (Meta validation)\", function(){\r",
							"    pm.expect(jsonData[\"Meta Data\"][\"2. Symbol\"]).to.be.eql(pm.environment.get(\"evn_symbol\"));\r",
							"})\r",
							"\r",
							"pm.test(\"Validate stock daily data is present.\", function(){\r",
							"    const series = jsonData[\"Time Series (Daily)\"]\r",
							"    pm.expect(Object.keys(series).length).to.be.above(0);\r",
							"})\r",
							"\r",
							"pm.test(\"Validate Meta Data is present\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"Meta Data\");\r",
							"})\r",
							"\r",
							"pm.test(\"Validate last refreshed data is a valid ISO date\", function(){\r",
							"    const date = jsonData[\"Meta Data\"][\"3. Last Refreshed\"];\r",
							"    pm.expect(date).to.match(/^\\d{4}-\\d{2}-\\d{2}/);\r",
							"})"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{base_url}}?function=TIME_SERIES_DAILY&symbol={{evn_symbol}}&apikey={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "function",
							"value": "TIME_SERIES_DAILY"
						},
						{
							"key": "symbol",
							"value": "{{evn_symbol}}"
						},
						{
							"key": "apikey",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "validating_symbl_search_function",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"let jsonData;\r",
							"\r",
							"try{\r",
							"    jsonData = pm.response.json()\r",
							"}\r",
							"catch(e){\r",
							"    pm.test(\"Response is not valid\", ()=>{\r",
							"        throw new Error(\"Response is not json.\" + pm.response.text());\r",
							"    })\r",
							"    return;\r",
							"}\r",
							";\r",
							"\r",
							"if(jsonData['Note']){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Note\"]);\r",
							"    pm.test(\"Rate limit warning recieved.\", ()=>{\r",
							"        pm.expect(jsonData['Note']).to.include('API call frequency');\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Error Message\"]){\r",
							"    console.warn(\"Invalid API call:\", jsonData[\"Error Message\"]);\r",
							"    pm.test(\"Invalid API call\", ()=>{\r",
							"        pm.expect(jsonData[\"Error Message\"]).to.be.not.empty;\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"if(jsonData[\"Information\"]){\r",
							"    console.warn(\"API rate limit exceeded\");\r",
							"    pm.test(\"API rate limit is 25\", ()=>{\r",
							"        pm.expect(jsonData[\"Information\"]).to.include(\"API rate limit is 25 requests per day\");\r",
							"    })\r",
							"    return;\r",
							"}\r",
							"\r",
							"pm.test(\"Status code is 200.\", function(){\r",
							"    pm.response.to.have.status(200);\r",
							"})\r",
							"\r",
							"pm.test(\"has bestMatch Array\", function(){\r",
							"    pm.expect(jsonData).to.have.property(\"bestMatches\");\r",
							"    pm.expect(jsonData.bestMatches.length).to.be.above(0);\r",
							"})\r",
							"\r",
							"let it_keywords = pm.iterationData.get(\"keywords\");\r",
							"\r",
							"pm.test(\"result has \" + it_keywords, function(){\r",
							"    const found = jsonData.bestMatches.some(match => \r",
							"                            match[\"2. name\"].toLowerCase().includes(it_keywords));\r",
							"    pm.expect(found).to.be.true;\r",
							"\r",
							"})\r",
							"\r",
							"console.log(\"iteration for symbol \"+ pm.environment.get(\"evn_symbols\")+\" completed.\");"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "{{base_url}}?function=SYMBOL_SEARCH&keywords={{keywords}}&apikey={{api_key}}",
					"host": [
						"{{base_url}}"
					],
					"query": [
						{
							"key": "function",
							"value": "SYMBOL_SEARCH"
						},
						{
							"key": "keywords",
							"value": "{{keywords}}"
						},
						{
							"key": "apikey",
							"value": "{{api_key}}"
						}
					]
				}
			},
			"response": []
		}
	]
}